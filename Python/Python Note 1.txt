=================================================
|              Python Practices                 |
| ++++++ Author : Md Abdullah Al Naser +++++++  |
| Bug fixing is welcome at mnaser.net@gmail.com |
|        Last Updated on : 2024-01-04           |
=================================================

Variables
---------
int
str
float
bool

Other Python Variables
----------------------
long
complex
unicode
list
tuple
set
dict

>>> a=5 
>>> b=2  
>>> a+b  
7
>>> a-b  
3
>>> a*b  
10
>>> a/b  
2.5
>>> a%b  
1

● Variables are used to temporarily store data
● Not specific to Python

In [1]: name="naser"
In [2]: name
Out[2]: 'naser'
In [3]: number=10
In [4]: number
Out[4]: 10
In [5]: id(name)
Out[5]: 140654678869976
In [6]: id(number)
Out[6]: 10918848
In [7]: name="ayan"
In [8]: id(name)
Out[8]: 140654657839936

● New name is really a new name, not the previous one, variable with same name is overwritten.
● Id is a place in memory where data of variables are stored.

● Variable can be written by using letters, underscore and digits
● Digits cannot be in leading position
● No special character can be used
● No spaces are allowed in variable
● Variables are case sensitive

● ROUTER and router are two separate variables

In [9]: router="r1"
In [10]: ROUTER="R1"
In [11]: router
Out[11]: 'r1'
In [12]: ROUTER
Out[12]: 'R1'

Python Data Types
-----------------
● Python is a Dynamically Typed language
● We don’t need to specify the "type of data" in variables in regular case

Built-in Data Types in Python
-----------------------------
● Text: str
● Numeric: int, float, complex
● Sequence: list, tupple, range
● Mapping Type: dictionaries
● Set Type: set, frozenset
● Boolean Type: bool
● Binary Type: bytes, bytearray, memoryview

● List is ordered, and mutable (can be changed)
● Tuple is ordered, but immutable (can't be changed)
● Dictionary is a collection of unordered "key:value pairs", it’s mutable
● Set is a collection of unordered objects, and mutable 
● Frozenset is a collection of unordered objects, and immutable 
● Boolean are logical values; True or False

Data Types Example
------------------
>>> a=10 
>>> b='Ten'
>>> c=2.5
>>> d=True
	  
>>> type(a)	  
<class 'int'>

>>> type(b)	  
<class 'str'>

>>> type(c)	  
<class 'float'>

>>> type(d)	  
<class 'bool'>

Working with Mutable Data Types
-------------------------------
● List should be in [   ]
● List is mutable
● List allows duplicate values

In [1]: my_routes = ["10.0.0.0/30", "192.168.10.0/30", "172.16.0.0/30"]

In [2]: my_routes
Out[2]: ['10.0.0.0/30', '192.168.10.0/30', '172.16.0.0/30']

In [3]: type(my_routes)
Out[3]: list

In [4]: my_routes[0]
Out[4]: '10.0.0.0/30'

In [5]: my_routes[1]
Out[5]: '192.168.10.0/30'

In [6]: my_routes[2]
Out[6]: '172.16.0.0/30'

In [7]: my_routes.append("150.0.0.0/30")

In [8]: my_routes[3]
Out[8]: '150.0.0.0/30'

In [9]: my_routes
Out[9]: ['10.0.0.0/30', '192.168.10.0/30', '172.16.0.0/30', '150.0.0.0/30']

In [10]: my_routes[3]="150.10.20.0/30"

In [11]: my_routes[3]
Out[11]: '150.10.20.0/30'

In [12]: my_routes
Out[12]: ['10.0.0.0/30', '192.168.10.0/30', '172.16.0.0/30', '150.10.20.0/30']

● Set should be in {    }
● Set is mutable
● Set doesn’t allow duplicate values

In [1]: set_of_vlans = {"vlan 5", "vlan 10", "vlan 15", "vlan 15", "vlan 5"}

In [2]: set_of_vlans
Out[2]: {'vlan 10', 'vlan 15', 'vlan 5'}

In [3]: set_of_vlans.remove("vlan 5")

In [4]: set_of_vlans
Out[4]: {'vlan 10', 'vlan 15'}

In [5]: set_of_vlans.add("vlan 25")

In [6]: set_of_vlans
Out[6]: {'vlan 10', 'vlan 15', 'vlan 25'}

● Dictionary should be in {    }
● Dictionary is mutable
● It contains "key:value" pairs

In [1]: my_credentials = {"hostname": "192.168.1.1",
   ...: "port": "22",
   ...: "username": "naser",
   ...: "pssword": "cisco"}

In [2]: my_credentials
Out[2]: 
{'hostname': '192.168.1.1',
 'port': '22',
 'username': 'naser',
 'pssword': 'cisco'}

In [3]: type(my_credentials)
Out[3]: dict

In [4]: my_credentials["port"]
Out[4]: '22'

In [5]: my_credentials["platform"] = "cisco_ios"

In [6]: my_credentials
Out[6]: 
{'hostname': '192.168.1.1',
 'port': '22',
 'username': 'naser',
 'pssword': 'cisco',
 'platform': 'cisco_ios'}


Working with Immutable Data Types
---------------------------------
● We cannot update string, we can only delete or overwrite it

In [1]: my_string = "CBT Nuggets"

In [2]: my_string
Out[2]: 'CBT Nuggets'

In [3]: id(my_string)
Out[3]: 140010593488368

In [4]: my_string = "CBT Nuggets.... it the best"

In [5]: my_string
Out[5]: 'CBT Nuggets.... it the best'

In [6]: id(my_string)
Out[6]: 140010593775248

● Tuple should be in (    )
● Tuple is immutable and cannot be updated, need to recreate from scratch

In [1]: my_tuple=("R1", "R2", "R3", "SW1")

In [2]: my_tuple
Out[2]: ('R1', 'R2', 'R3', 'SW1')


List		Set		Dictionary	Tuple
---------------------------------------------------------- 
Ordered		Unordered	Unordered	Ordered
Mutable		Mutable		Mutable		Immutable
[    ]		{    }		{    }		(    )
DUP		NO DUP		N/A		N/A
				Key:Value
				Key- NO DUP

Taking User Input in Terminal
-----------------------------
>>> a= input()
5

>>> a	  
'5'

>>> print (a)  
5

Type Casting
------------
>>> a=5  

>>> type(a) 
<class 'int'>

>>> a=str(a)

>>> type(a)
<class 'str'>

>>> a=str(input())
1

>>> a	  
'1'

>>> type(a)  
<class 'str'>

>>> p,q=input().split()
10 20

>>> p  
'10'

>>> q  
'20'

Arithmetic Operators
--------------------
+ addition
- substraction
* multiplication
/ division
% modulus
** exponent
// floor division; to skip trailing digit after "."

Comparison Operators
--------------------
== equal
!= not equal
> greater than
< less than
>= greater equal
<= less equal

>>> 2==2 
True

>>> 2!=2	  
False

>>> 2!=3	  
True

>>> 3<5  
True

>>> 3<=5	  
True

>>> 3>=5	  
False

Assignment Operators
--------------------
= ## left=right

a=10
>>> a  
'10'

+= ## left+right=left

>>> a+=5		## 10+5=15
>>> a  
15

-= ## left-right=left

>>> a-=5		## 15-5=10
>>> a  
10

*= ## left*right=left

>>> a*=5		## 10*5=50
>>> a  
50

/= ## left/right=left

>>> a/=5		## 50*5=10
>>> a  
10.0

>>> type(a)
<class 'float'>

Logical Operators
-----------------
and
or
not

>>> 2==2 and 3==4  
False

>>> 2==2 or 3==4	  
True

>>> not 2==5	  
True

Membership Operators
--------------------
>>> a='bangladesh'  
>>> b='bangla'  
>>> c='english'
	  
>>> a in b  
False

>>> b in a	  
True

>>> c in a	  
False

>>> c not in a	  
True

Identity Operators
------------------
is
is not
	  
>>> a='bangladesh'  
>>> b='bangladesh'  
>>> c='bangla'
	  
>>> a is b  
True

>>> a is c  
False

>>> a is not c  
True

>>> a is b and b is not c  
True

Commenting in Python
--------------------
inline comment (single line)
# comment1

block comment (multi line)
#comment1
#comment2
#comment3


Indexing
--------
>>> a="bangla"
	 
>>> a[0] 
'b'
>>> a[1]	 
'a'
>>> a[2] 
'n'
>>> a[3] 
'g'
>>> a[4] 
'l'
>>> a[5] 
'a'
>>> a[6]

>>> a[0]+a[1]
'ba'

>>> a[1:4]	 
'ang'

>>> a[:2]	 
'ba'

>>> a[2:] 
'ngla'

>>> a[-2]	 
'l'

>>> a[-1] 
'a'

>>> a[-2]+a[-1]	 
'la'


String Formatting
-----------------
>>> a=int(input())
1

>>> print ('My given number is: ', a)  
My given number is:  1

>>> b=float(input())	   
2.5678

>>> print('My given number is: %.2f' %b)	   
My given number is: 2.57

>>> x='bangla'	   
>>> y='english'	   

>>> print('I can speak', x, 'and', y)
I can speak bangla and english

>>> x+' - '+y   
'bangla - english'

>>> ' & '.join((x,y))     
'bangla & english'

>>> x.capitalize()     
'Bangla'

>>> x.upper()     
'BANGLA'

>>> 'BANGLA'.lower()     
'bangla'

>>> 'bangla'.swapcase()   
'BANGLA'

>>> 'baNGla'.swapcase()     
'BAngLA'


String Counting
---------------
>>> len(x)     
6
	     
>>> len('hindi')	     
5

>>> x.count('a')	     
2
 
>>> sentence='camel can carry'
>>> sentence.replace('c','d')   
'damel dan darry'

>>> sentence.replace('c','')    
'amel an arry'

>>> sentence.strip('c')     ## Strips first and last given character
'amel can carry'

 
List	## A smart data type in python
--------------------------------------
>>> a=[]
	  
>>> a	     
[]
   
>>> type(a)   
<class 'list'>

>>> a=['apple', 'ball', 'cat', 'dog', 'eagle']
	     
>>> a     
['apple', 'ball', 'cat', 'dog', 'eagle']

>>> type(a[0])     
<class 'str'>

>>> a[2]
'cat'

>>> a[1:4]     
['ball', 'cat', 'dog']		## from index 1 to before index 4

>>> a[3]='donkey'
	     
>>> a     
['apple', 'ball', 'cat', 'donkey', 'eagle']

>>> a.append('frog')    	## can add only one item 
>>> a	     
['apple', 'ball', 'cat', 'donkey', 'eagle', 'frog']

>>> a.insert(2,'book')     
>>> a     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog']

>>> a.extend(['goat','hen','ink'])     
>>> a     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog', 'goat', 'hen', 'ink']

>>> a	     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog', 'goat', 'hen', 'ink', 'juice', 'kite']

>>> del a[11]    
>>> a
	     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog', 'goat', 'hen', 'ink', 'juice']

>>> a.remove('juice')
>>> a
	     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog', 'goat', 'hen', 'ink']

>>> del a[-1]   

>>> a	     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog', 'goat', 'hen']

>>> a.pop()		## removes last item of the list  
'hen'

>>> a     
['apple', 'ball', 'book', 'cat', 'donkey', 'eagle', 'frog', 'goat']

>>> len(a)	     
8

>>> a.count('cat')	     
1
>>> 

>>> a.reverse()	     
>>> a     
['goat', 'frog', 'eagle', 'donkey', 'cat', 'book', 'ball', 'apple']

>>> b=[3,8,2,0,7,4]

>>> b     
[3, 8, 2, 0, 7, 4]

>>> len(b)	     
6

>>> b.sort()     
>>> b	     
[0, 2, 3, 4, 7, 8]


Tupple	## One kind of list but not much flexible
-------------------------------------------------
>>> a=()
	     
>>> a	     
()

>>> type(a)     
<class 'tuple'>

>>> a=('apple', 'ball', 'cat')
	     
>>> a	     
('apple', 'ball', 'cat')

>>> a[1]	     
'ball'

>> type(a[1])     
<class 'str'>

>>> a=a+('dog',)		## , comma required
	     
>>> a     
('apple', 'ball', 'cat', 'dog')


SET
---
>>> a={'apple', 'banana', 'orange'}
	     
>>> a	     
{'orange', 'apple', 'banana'}

>>> type(a)	     
<class 'set'>

>>> b=set('abcd')
	     
>>> b     
{'c', 'a', 'b', 'd'}

>>> type(b)	     
<class 'set'>

>>> c=set()     
>>> c     
set()

>>> d={}
     
>>> d	     
{}

>>> type(d)	     
<class 'dict'>

>>> a.add('berry')
	     
>>> a     
{'orange', 'berry', 'apple', 'banana'}

>>> a.update('grape', 'mango')
	     
>>> a	     
{'p', 'apple', 'banana', 'e', 'orange', 'r', 'g', 'n', 'a', 'm', 'berry', 'o'}

>>> a.update({'grape', 'mango'})
	     
>>> a     
{'grape', 'p', 'apple', 'banana', 'e', 'orange', 'r', 'g', 'n', 'a', 'm', 'berry', 'o', 'mango'}

>>> a.remove('mango')
	     
>>> a	     
{'grape', 'p', 'apple', 'banana', 'e', 'orange', 'r', 'g', 'n', 'a', 'm', 'berry', 'o'}

>>> a.remove('mango')
	     
Traceback (most recent call last):
  File "<pyshell#243>", line 1, in <module>
    a.remove('mango')
KeyError: 'mango'

>>> a.discard('mango')		## discards error messages


>>> a.pop()     		## pops first item
'grape'

>>> a	     
{'p', 'apple', 'banana', 'e', 'orange', 'r', 'g', 'n', 'a', 'm', 'berry', 'o'}

>>> a.clear()			## clear all items
	     
>>> a	     
set()

>>> a={1,3,4,5,7,9}     
>>> b={2,3,5,8,9}
	     
>>> a.union(b)     
{1, 2, 3, 4, 5, 7, 8, 9}

>>> a.intersection(b)	     
{9, 3, 5}

>>> a.difference(b)	     
{1, 4, 7}

>>> b.difference(a)     
{8, 2}
 

Dictionary
----------
>>> a={}
	     
>>> type(a)	     
<class 'dict'>
	          
>>> a={'name':'naser', 'email':'naser@yahoo.com', 'cell': '0170000000'}
	     
>>> a     
{'name': 'naser', 'email': 'naser@yahoo.com', 'cell': '0170000000'}

>>> a['cell']     
'0170000000'

a['cell'] = '0180000000'

>>> a['cell']     
'0180000000'

>>> a['hometown']='dhaka'
	     
>>> a     
{'name': 'naser', 'email': 'naser@yahoo.com', 'cell': '0180000000', 'hometown': 'dhaka'}

>>> b={'son':'ayan', 'company':'rgl'}
	     
>>> a     
{'name': 'naser', 'email': 'naser@yahoo.com', 'cell': '0180000000', 'hometown': 'dhaka'}

>>> b	     
{'son': 'ayan', 'company': 'rgl'}
	     
>>> a.update(b)	     
>>> a	     
{'name': 'naser', 'email': 'naser@yahoo.com', 'cell': '0180000000', 'hometown': 'dhaka', 'son': 'ayan', 'company': 'rgl'}

>>> b	     
{'son': 'ayan', 'company': 'rgl'}

>>> del a['company']     
>>> a     
{'name': 'naser', 'email': 'naser@yahoo.com', 'cell': '0180000000', 'hometown': 'dhaka', 'son': 'ayan'}

>>> a.clear()     
>>> a	     
{}

>>> del a

>>> a={'name':'naser', 'email':'naser@yahoo.com', 'cell': '0170000000'}     
>>> a.copy()     
{'name': 'naser', 'email': 'naser@yahoo.com', 'cell': '0170000000'}

>>> a.get('name')     
'naser'

>>> a.get('namea')
	     
>>> a.get('namea', 'none')	     
'none'

>>> 'name' in a     
True

>>> 'fname' in a	     
False
     
>>> a.items()     
dict_items([('name', 'naser'), ('email', 'naser@yahoo.com'), ('cell', '0170000000')])

>>> a.keys()	     
dict_keys(['name', 'email', 'cell'])

>>> a.values()     
dict_values(['naser', 'naser@yahoo.com', '0170000000'])



>>> a=5
	     
>>> if a>2:
	     print('a is greater than 2')
 
a is greater than 2

>>> a=10	     
>>> b=15

>>> if a>b:
	     print(a, 'is greater than', b)
else:
	     print(a, 'is less than', b)

10 is less than 15


>>> a=25     
>>> b=20
	     
if a>b:
    print(a, 'is greater than', b)
else:
    print(a, 'is less than', b)
     
25 is greater than 20


a=int(input())

if a==5:
    print(a, 'is equal to 5')
elif a>=5:
    print(a, 'is greater than 5')
else:
    print(a, 'is less than 5')

● In python all non-zero and all non-null values are TRUE
● All zero and all null values are FALSE

a=int(input())

if a>0:
    print(a, 'is a positive number')
elif a<0:
    print(a, 'is a negative number')
else:
    print(a, 'is zero')


a=int(input())

if a%2==0:
    print(a, 'is an even number')
else:
    print(a, 'is an odd number')

a=str(input())

if a>='a' and a<='z':
    print(a, 'is a small letter')
else:
    print(a, 'is a capital letter')

a=str(input())

if a in 'aeiouAEIOU':
    print(a, 'is a vowel')
else:
    print(a, 'is a consonant')


while Loop
----------
condition:
    action

n=1
while n<=100:
    print(n)
    n=n+1

n=1
m=0
while n<=100:
    m=m+n
    n=n+1

print(m)     
5050
>>> username = input(‘Enter your name:’)
Enter your name:naser

>>> print ('Hello', username, '!')
Hello naser !

>>> print ('Hello', username + '!')
Hello naser!

name = input('Enter your name: ')
age = input('Enter your age: ')
age = int(age)

if age > 18:
    print('Hi', name, 'you are 18+')
else:
    print('Hi', name, 'you are below 18')

>>> a = ['onion', 'potato', 'ginger', 'cucumber']
print(type(a))

for item in a:
    print(item)

onion
potato
ginger
cucumber

a = ‘python’
for letter in a:
    print(letter)

...
p
y
t
h
o
n

for number in range (1,11):
    print(number)

...
1
2
3
4
5
6
7
8
9
10

for number in range (1,11):
    if number == 5:
        break
    print(number)

...
1
2
3
4
 
for number in range (1,11):
    if number == 5:
        continue
    print(number)

1
2
3
4
6
7
8
9
10

n=1
while n<=10:
    print(n)
    n=n+1
else:
    print(‘Loop is over’)

...
1
2
3
4
5
6
7
8
9
10
Loop is over

for n in range (0,11):
    print(n)
    n=n+1
else:
    print(‘Loop is over’)
...
0
1
2
3
4
5
6
7
8
9
10
Loop is over

print('Enter your number:')
number=int(input())

count=1

while count <= 10:
    print(number, 'x', count, '=', number*count)
    count+=1

...
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50

original=input('Enter your decimal number in between 0 to 255: ')
original=int(original)
number=int(original)
a=list()
b=str()
div=128
i=0

while number<=255 and div>=1:
    if number/div>=1:
        a.append('1')
        number=number-div
        div=div/2        
    else:
        a.append('0')
        div=div/2

while i<=7:
    b=b+a[i]
    i=i+1

if original>255:
    print('Your given number', original, 'is not valid')
else:
    print('The binary value of', original, 'is', b)


