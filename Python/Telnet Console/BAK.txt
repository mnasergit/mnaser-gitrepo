from flask import Flask, render_template
from flask_socketio import SocketIO, emit
import telnetlib

app = Flask(__name__)
socketio = SocketIO(app, namespace='/console')
command = "show runn"

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('connect')
def handle_connect():
    print('Client connected')
    emit('output', 'Connected to the server.')

@socketio.on('command')
def handle_command(command):
    print(f'Received command: {command}')
    execute_command(command)

def execute_command(command):
    print(f'Executing command: {command}')

    try:
        host = '10.99.1.1'
        username = 'apnic'
        password = 'training'

        tn = telnetlib.Telnet(host, timeout=5)

        tn.read_until(b'>', timeout=5)
        tn.write(username.encode('utf-8') + b'\n')
        tn.read_until(b'>', timeout=5)
        tn.write(password.encode('utf-8') + b'\n')
        tn.read_until(b'>', timeout=5)
        tn.write(f'{command}\n'.encode('utf-8'))

        output = tn.interact()

        emit('output', output)

        tn.close()

    except Exception as e:
        error_message = f'Error executing command: {str(e)}'
        print(error_message)
        emit('output', error_message)

if __name__ == '__main__':
    socketio.run(app, debug=True)


###############################


from flask import Flask, render_template
from flask_socketio import SocketIO, emit
import telnetlib

app = Flask(__name__)
socketio = SocketIO(app, namespace='/console')
command = "show runn"

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('connect')
def handle_connect():
    print('Client connected')
    emit('output', 'Connected to the server.')

@socketio.on('command')
def handle_command(command):
    print(f'Received command: {command}')
    execute_command(command)

def execute_command(command):
    print(f'Executing command: {command}')

    try:
        host = '10.99.1.1'
        username = 'apnic'
        password = 'training'

        tn = telnetlib.Telnet(host, timeout=5)

        tn.read_until(b'>', timeout=5)
        tn.write(username.encode('utf-8') + b'\n')
        tn.read_until(b'>', timeout=5)
        tn.write(password.encode('utf-8') + b'\n')
        tn.read_until(b'>', timeout=5)
        tn.write(f'{command}\n'.encode('utf-8'))

        # Read the output line by line and send each line to the client
        while True:
            output = tn.read_until(b'\n', timeout=5).decode('utf-8')
            if output == '':
                break
            emit('output', output)

        tn.close()

    except Exception as e:
        error_message = f'Error executing command: {str(e)}'
        print(error_message)
        emit('output', error_message)


if __name__ == '__main__':
    socketio.run(app, debug=True)




###################################################




<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Router Console</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script src="https://unpkg.com/xterm@4.11.0/lib/xterm.js"></script>
    <style>
        #terminal {
            height: 300px;
        }
    </style>
</head>
<body>
    <button onclick="connectToConsole()">Connect to Router Console</button>
    <div id="terminal"></div>
    <script>
        const socket = io.connect('http://127.0.0.1:5000');
        //const socket = io.connect('http://127.0.0.1:5000/console');
        const terminalContainer = document.getElementById('terminal');
        const term = new Terminal();

        term.open(terminalContainer);

        socket.on('connect', function() {
            console.log('WebSocket connected');
        });

        socket.on('output', function (data) {
            term.write(data);
        });

        function connectToConsole() {
            const command = 'telnet 10.99.1.1';
            socket.emit('command', command);
        }

        term.onData(e => {
            socket.emit('command', e);
        });
    </script>
</body>
</html>





