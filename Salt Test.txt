ssh -i /root/.ssh/known_hosts group30.labs.apnictraining.net

salt-key -y -a group30.c.humane-hagfish.internal

#############################################################

sudo apt-get install salt-master -y
sudo apt-get install salt-minion -y
sudo vi /etc/salt/master.d/master.conf
interface: 10.99.99.11

sudo systemctl status salt-master.service
sudo systemctl start salt-master.service
sudo systemctl restart salt-master.service
sudo systemctl enable salt-master.service

sudo vi /etc/salt/minion.d/minion.conf
master: 10.99.99.11

sudo systemctl status salt-minion.service
sudo systemctl start salt-minion.service
sudo systemctl restart salt-minion.service
sudo systemctl enable salt-minion.service

sudo salt-master -V
Salt Version:
          Salt: 3006.6

Python Version:
        Python: 3.10.13 (main, Nov 15 2023, 04:34:27) [GCC 11.2.0]

Dependency Versions:
          cffi: 1.14.6
      cherrypy: 18.6.1
      dateutil: 2.8.1
     docker-py: Not Installed
         gitdb: Not Installed
     gitpython: Not Installed
        Jinja2: 3.1.3
       libgit2: Not Installed
  looseversion: 1.0.2
      M2Crypto: Not Installed
          Mako: Not Installed
       msgpack: 1.0.2
  msgpack-pure: Not Installed
  mysql-python: Not Installed
     packaging: 22.0
     pycparser: 2.21
      pycrypto: Not Installed
  pycryptodome: 3.19.1
        pygit2: Not Installed
  python-gnupg: 0.4.8
        PyYAML: 6.0.1
         PyZMQ: 23.2.0
        relenv: 0.14.2
         smmap: Not Installed
       timelib: 0.2.4
       Tornado: 4.5.3
           ZMQ: 4.3.4

System Versions:
          dist: ubuntu 20.04.6 focal
        locale: utf-8
       machine: x86_64
       release: 5.4.0-172-generic
        system: Linux
       version: Ubuntu 20.04.6 focal
	   
	   
sudo salt-key -L
Accepted Keys:
Denied Keys:
Unaccepted Keys:
Rejected Keys:

sudo salt-key -y -a apnic
The following keys are going to be accepted:
Unaccepted Keys:
apnic
Key for minion apnic accepted.


sudo salt-key -L
Accepted Keys:
apnic
Denied Keys:
Unaccepted Keys:
Rejected Keys:


sudo salt '*' test.ping
apnic:
    True

sudo vi /etc/hosts
10.99.99.11 salt
10.99.99.11 apnic
10.99.1.1 r1


cat /etc/os-release

NAME="Ubuntu"
VERSION="20.04.6 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.6 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal

python3 -m pip install --upgrade pip
sudo /opt/saltstack/salt/bin/python3.10 -m pip install --upgrade pip

pip install salt-sproxy
pip install netmiko
pip install napalm

sudo mkdir -p /srv/salt/pillar
sudo mkdir -p /tmp/pillar
sudo mkdir -p /srv/salt/states/


sudo vi /etc/salt/master.d/master.conf
pillar_roots:
  base:
    - /srv/salt/pillar
  dev:
    - /tmp/pillar
file_roots:
  base:
    - /srv/salt/
    - /srv/salt/states/
	

sudo vi /srv/salt/pillar/top.sls

base:
  '*':
    - common
  'group*':
    - group_common
  'r1':
    - r1

sudo vi /srv/salt/pillar/r1.sls
proxy:
  proxytype: netmiko
  device_type: cisco_ios
  host: 10.99.1.1
  username: apnic
  password: training
  
sudo vi /srv/salt/pillar/common.sls
common: true

sudo vi /srv/salt/pillar/group_common.sls
group_common: true

sudo vi /srv/salt/pillar/r1.sls
group_common: false

sudo vi /etc/salt/master.d/master.conf
open_mode: true

sudo vi /etc/salt/minion.d/minion.conf
open_mode: true

sudo systemctl restart salt-master.service
sudo systemctl restart salt-minion.service

sudo salt-key -L
Accepted Keys:
apnic
r1
Denied Keys:
Unaccepted Keys:
Rejected Keys:

sudo salt '*' test.ping
r1:
    True
apnic:
    True

sudo salt r1 pillar.items
r1:
    ----------
    common:
        True
    proxy:
        ----------
        device_type:
            cisco_ios
        host:
            10.99.1.1
        password:
            training
        proxytype:
            netmiko
        username:
            apnic


sudo salt 'apnic' test.versions_report

sudo salt-proxy -l debug --proxyid r1

sudo salt r1 test.ping
r1:
    True

sudo salt r1 grains.items

ssh apnic@r1

sudo salt r1 netmiko.send_command 'show version'

sudo salt r1 netmiko.send_command 'show ip interface brief'

sudo salt r1 netmiko.send_command 'show ip route'

sudo salt r2 netmiko.send_command 'show run | i hostname'


################################################################

https://salt-sproxy.readthedocs.io/en/latest/install.html

sudo vi /etc/hosts
10.99.2.1 r2

sudo vi /etc/salt/master.d/master.conf

roster: file
roster_file: /etc/salt/roster

use_existing_proxy: true

# =====================================================
# Salt API configuration:
# (for simplicity, using the "auto" authenticator, not
#  recommended in production environments)

external_auth:
  auto:
    test-usr:
    - '@jobs'
    - '@runner'
    - .*

rest_cherrypy:
  disable_ssl: true
  port: 8080
  
sudo vi /etc/salt/roster
r2:
  grains:
    role: router


sudo vi /etc/salt/proxy.d/proxy.conf
open_mode: true
pki_dir: /etc/salt/pki/proxy
cachedir: /var/cache/salt/proxy
multiprocessing: false

sudo vi /srv/salt/pillar/r2.sls
proxy:
  proxytype: napalm
  driver: ios
  host: {{ opts.id }}
  username: apnic
  password: training

sudo vi /srv/salt/pillar/top.sls
base:
  '*':
    - common
  'group*':
    - group_common
  'r1':
    - r1
  'r2':
    - r2

sudo mkdir -p /srv/salt/templates

sudo vi /srv/salt/templates/hostname.jinja
{%- if grains.os == 'junos' %}
set system host-name {{ grains.id }}
{%- elif grains.os in ['eos'] %}
hostname {{ grains.id }}
{%- endif %}




################################################################

sudo vi /etc/salt/minion.d/minion.conf

proxy:
  proxytype: napalm

sudo systemctl restart salt-master.service


sudo vi /srv/salt/router_config.jinja
{% set config = salt['napalm.get_config'](driver='ios') %}
{{ config['running'] }}



sudo vi /srv/salt/pull_config.sls
pull_router_config:
  napalm.get_config:
    - tgt: 'r1'
    - driver: 'ios'


sudo vi /srv/salt/pull_config.sls
pull_router_config:
  module.run:
    - name: net.load_template
    - tgt: 'r1'
    - template_name: salt://templates/router_config.jinja
    - kwargs:
        saltenv: base
        context:
          grains: {{ grains | yaml }}


naser@apnic:~$ sudo salt-call state.apply pull_config
[ERROR   ] Module function net.load_template is not available
local:
----------
          ID: pull_router_config
    Function: module.run
        Name: net.load_template
      Result: False
     Comment: Module function net.load_template is not available
     Started: 14:51:09.872462
    Duration: 987.079 ms
     Changes:

Summary for local
------------
Succeeded: 0
Failed:    1
------------
Total states run:     1
Total run time: 987.079 ms









sudo ls /opt/saltstack/salt/lib/python3.10/site-packages/salt/modules/






https://www.youtube.com/watch?v=fKD7A6mcSxA
https://asciinema.org/a/247697?autoplay=1
sudo wget -O - https://repo.saltstack.com/py3/ubuntu/20.04/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add -
sudo echo "deb http://repo.saltstack.com/py3/ubuntu/20.04/amd64/latest focal main" | sudo tee /etc/apt/sources.list.d/saltstack.list
sudo vi /etc/salt/proxy.d/proxy.conf





naser@apnic:~$ sudo mkdir -p /srv/salt/_modules
naser@apnic:~$ sudo vi /srv/salt/_modules/example.py
naser@apnic:~$ sudo vi /srv/salt/_modules/example.py
def version():
    if __grains__['os'] == 'junos':
        ret = __salt__['napalm.junos_cli']('show version', format='xml', dev_timeout=30)
        return ret['message']['software-information']['junos-version']
    elif __grains__['os'] == 'eos':
        ret = __salt__['napalm.pyeapi_run_commands']('show version')
        return ret[0]['version']
    elif __grains__['os'] == 'nxos':
        ret = __salt__['napalm.nxos_api_rpc']('show version')
        return ret[0]['result']['body']['sys_ver_str']
    raise Exception('Not supported on this platform')



salt-sproxy '*' test.ping


