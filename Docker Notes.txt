Docker Installation
===================
https://docs.docker.com/engine/install/ubuntu/

Check OS Details
================
naser@apnic:~$ cat /etc/*release*
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION="Ubuntu 20.04.6 LTS"
NAME="Ubuntu"
VERSION="20.04.6 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.6 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal

Uninstall old versions
======================
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done

Install using the apt repository
================================
Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.

Set up Docker's apt repository.
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update


Install the Docker packages
===========================
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

Check version
=============
sudo docker version
Client: Docker Engine - Community
 Version:           25.0.3
 API version:       1.44
 Go version:        go1.21.6
 Git commit:        4debf41
 Built:             Tue Feb  6 21:14:17 2024
 OS/Arch:           linux/amd64
 Context:           default

Server: Docker Engine - Community
 Engine:
  Version:          25.0.3
  API version:      1.44 (minimum version 1.24)
  Go version:       go1.21.6
  Git commit:       f417435
  Built:            Tue Feb  6 21:14:17 2024
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.6.28
  GitCommit:        ae07eda36dd25f8a1b98dfbf587313b99c0190bb
 runc:
  Version:          1.1.12
  GitCommit:        v1.1.12-0-g51d5e94
 docker-init:
  Version:          0.19.0
  GitCommit:        de40ad0

Docker Run
==========
sudo docker run hello-world

sudo docker run docker/whalesay cowsay Hello-World!

latest: Pulling from docker/whalesay
[DEPRECATION NOTICE] Docker Image Format v1, and Docker Image manifest version 2, schema 1 support will be removed in an upcoming release. Suggest the author of docker.io/docker/whalesay:latest to upgrade the image to the OCI Format, or Docker Image manifest v2, schema 2. More information at https://docs.docker.com/go/deprecated-image-specs/
e190868d63f8: Pull complete
909cd34c6fd7: Pull complete
0b9bfabab7c1: Pull complete
a3ed95caeb02: Pull complete
00bf65475aba: Pull complete
c57b6bcc83e3: Pull complete
8978f6879e2f: Pull complete
8eed3712d2cf: Pull complete
Digest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b
Status: Downloaded newer image for docker/whalesay:latest
 ______________
< Hello-World! >
 --------------
    \
     \
      \
                    ##        .
              ## ## ##       ==
           ## ## ## ##      ===
       /""""""""""""""""___/ ===
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
       \______ o          __/
        \    \        __/
          \____\______/




sudo docker run nginx:latest

sudo docker ps
sudo docker ps -a

CONTAINER ID   IMAGE             COMMAND                  CREATED              STATUS                          PORTS     	  NAMES
f0ba19995b6d   nginx:latest      "/docker-entrypoint.…"   About a minute ago   Exited (0) About a minute ago
               jovial_mcnulty
351de6ce6796   docker/whalesay   "cowsay Hello-World!"    3 minutes ago        Exited (0) 3 minutes ago
               interesting_gauss
bd9c46e27b06   hello-world       "/hello"                 7 minutes ago        Exited (0) 7 minutes ago
               eager_hoover

sudo docker start interesting_gauss
sudo docker stop interesting_gauss
sudo docker rm interesting_gauss


sudo docker images
REPOSITORY        TAG       IMAGE ID       CREATED        SIZE
nginx             latest    e4720093a3c1   9 days ago     187MB
hello-world       latest    d2c94e258dcb   9 months ago   13.3kB
docker/whalesay   latest    6b362a9f73eb   8 years ago    247MB


sudo docker rmi hello-world

Note: Delete all dependent container before deleting the image

sudo docker pull ubuntu 
sudo docker run ubuntu 
# Ubuntu can't run as it is a simply an OS, container doesn't meant to run an OS
sudo docker run ubuntu sleep 120
# Ubuntu runs for 120 sec

Container runs itself as long as a process runs inside it

sudo docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES
ce16fb53df62   ubuntu    "sleep 320"              5 seconds ago   Up 4 seconds             laughing_wilbur
cd4d6a9bf3bb   nginx     "/docker-entrypoint.…"   7 minutes ago   Up 7 minutes   80/tcp    jolly_napier
naser@apnic:~$

To see any file inside a running container image 
sudo docker exec ce16fb53df62 cat /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.3      ce16fb53df62



sudo docker run nginx
# By default container runs in attach mode, grabs console

sudo docker run -d nginx

sudo docker attach 3ae02273abdd


sudo docker run -it kodekloud/simple-prompt-docker
# runs app in interactive mode and attache to container terminal

Docker internal network block ping 172.17.0.0/16

sudo docker run -p 8080:80 nginx

sudo curl http://192.168.20.11:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

Access container terminal
=========================
sudo docker exec -it ccc91c6bbac6 /bin/bash

root@ccc91c6bbac6:/# env
HOSTNAME=ccc91c6bbac6
PWD=/
PKG_RELEASE=1~bookworm
HOME=/root
NJS_VERSION=0.8.3
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NGINX_VERSION=1.25.4
_=/usr/bin/env




Dir/file mapping between docker host and docker conatiner
Files in container will be deleted when container is deleted



Bind mount
==========
sudo docker run -v /opt/datadir:/var/lib/mysql mysql

sudo docker inspect bfe05be59703


sudo docker inspect bfe05be59703 # output in JSON format

[
    {
        "Id": "bfe05be59703e07662ae76ebcfd90ab6046e083b0fde0bee02175e28f3eff898",
        "Created": "2024-02-24T12:19:35.255588205Z",
        "Path": "/docker-entrypoint.sh",
        "Args": [
            "nginx",
            "-g",
            "daemon off;"
        ],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 19703,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2024-02-24T12:19:35.587686579Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:e4720093a3c1381245b53a5a51b417963b3c4472d3f47fc301930a4f3b17666a",
        "ResolvConfPath": "/var/lib/docker/containers/bfe05be59703e07662ae76ebcfd90ab6046e083b0fde0bee02175e28f3eff898/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/bfe05be59703e07662ae76ebcfd90ab6046e083b0fde0bee02175e28f3eff898/hostname",
        "HostsPath": "/var/lib/docker/containers/bfe05be59703e07662ae76ebcfd90ab6046e083b0fde0bee02175e28f3eff898/hosts",
        "LogPath": "/var/lib/docker/containers/bfe05be59703e07662ae76ebcfd90ab6046e083b0fde0bee02175e28f3eff898/bfe05be59703e07662ae76ebcfd90ab6046e083b0fde0bee02175e28f3eff898-json.log",
        "Name": "/zealous_wu",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "docker-default",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "default",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "ConsoleSize": [
                20,
                106
            ],
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "host",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": [],
            "BlkioDeviceWriteBps": [],
            "BlkioDeviceReadIOps": [],
            "BlkioDeviceWriteIOps": [],
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": false,
            "PidsLimit": null,
            "Ulimits": [],
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware",
                "/sys/devices/virtual/powercap"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/388f25da7dc9ff35bcbf59b1a5a06126c67c8a892631c1597f37b15cbfcfa499-init/diff:/var/lib/docker/overlay2/be2ddcd7e42311ad318ba57371a0a5a8e7eb731fc17951bc8b425f92ecae08e9/diff:/var/lib/docker/overlay2/2b5862692e5e6c4d24efa8116d4a8e6daedfec8720d7cf866d40e2e80d22861d/diff:/var/lib/docker/overlay2/75d29e30327fb2c688d964750d49351d732325f3566bad311835223bc74f524d/diff:/var/lib/docker/overlay2/70ad02bdd9bf3b8d4c0c83325594c63d9fcaf32883212db7106b3939b53b6dde/diff:/var/lib/docker/overlay2/18a32fb62facc72a17001a58962259807958084f348d8fee54af2f0f674e2731/diff:/var/lib/docker/overlay2/415d413d8d8d5aab5da89598b80a707d31fa45e19912981088e6f58cd5fcce60/diff:/var/lib/docker/overlay2/5ecc9e001c0612ffe52bc9485bf890d6550cba17a17e9f608fa4ffce957f28f5/diff",
                "MergedDir": "/var/lib/docker/overlay2/388f25da7dc9ff35bcbf59b1a5a06126c67c8a892631c1597f37b15cbfcfa499/merged",
                "UpperDir": "/var/lib/docker/overlay2/388f25da7dc9ff35bcbf59b1a5a06126c67c8a892631c1597f37b15cbfcfa499/diff",
                "WorkDir": "/var/lib/docker/overlay2/388f25da7dc9ff35bcbf59b1a5a06126c67c8a892631c1597f37b15cbfcfa499/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [],
        "Config": {
            "Hostname": "bfe05be59703",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "80/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NGINX_VERSION=1.25.4",
                "NJS_VERSION=0.8.3",
                "PKG_RELEASE=1~bookworm"
            ],
            "Cmd": [
                "nginx",
                "-g",
                "daemon off;"
            ],
            "Image": "nginx",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "maintainer": "NGINX Docker Maintainers <docker-maint@nginx.com>"
            },
            "StopSignal": "SIGQUIT"
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "2eef73001124dc0e42e365735258e10a3ce4e5fe7b18ad3d351b08708dacd0fb",
            "SandboxKey": "/var/run/docker/netns/2eef73001124",
            "Ports": {
                "80/tcp": null
            },
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "dd5ad875d3ddb1457f983c6c306f10c9d243c6696b3db6b0d876147e2e91f528",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:02",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "MacAddress": "02:42:ac:11:00:02",
                    "NetworkID": "d945ed3bcb308b3fc9ba72dbf9deb9d69fc65b944dd87f9b0520c0fec2e1ba0c",
                    "EndpointID": "dd5ad875d3ddb1457f983c6c306f10c9d243c6696b3db6b0d876147e2e91f528",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "DriverOpts": null,
                    "DNSNames": null
                }
            }
        }
    }
]


sudo docker logs bfe05be59703

sudo docker ru -c APP_COLOR=blue simple-web-page
# To pass environment variable to any running container

# To find env variable in conatiner find "Env" in docker inspect output


Create own image
================
Dockerfile # each instruction create an layer
==========
FROM Ubuntu

RUN apt-get update
RUN apt-get install python

RUN pip install flask
RUN pip install flask-mysql

COPY / /opt/source-code

ENTRYPOINT FLASK_APP=/opt/source-code/app/py flask run


Build image
===========

sudo docker build Dockerfile -t naser/custom-app

To pust image to public repository
==================================
sudo docker push naser/custom-app





 

sudo docker history naser/custom-app




sudo docker run ubuntu cat /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.3      6e251efd22bc


CMD vs Entrypoint

FROM Ubuntu
CMD sleep 5
sudo docker run ubuntu-sleeper sleep 10

FROM Ubuntu
ENTRYPOINT ["sleep"]
sudo docker run ubuntu-sleeper 10



Docker Networking
=================

Docker creates 3 networks automatically
Bridge: Private Internal Network, requires port mapping
none: container not attached to any network
host: doesn't need port mapping; can't run mupiple app on same port


sudo docker run Ubuntu --network=none


docker0: 172.17.0.1



Create network in docker
========================

sudo docker network create \
    --driver bridge \
	--subnet 192.168.0.0/16
	custom-isolated-network
	
sudo docker network ls
	
	
Embedded DNS
============

Container can reach each other using their name or IP
Docker has a buil-in DNS uisng 127.17.0.11

Docker Storage
==============
File system
-----------
/var/lib/docker
  aufs
  containers
  image
  volumes
  
root@apnic:~# cd /var/lib/docker/
root@apnic:/var/lib/docker# ls
buildkit  containers  engine-id  image  network  overlay2  plugins  runtimes  swarm  tmp  volumes

Docker Layered Architecture
===========================
Layer 6: 
6 is a Container Layer; writable
to deal with log file written by application
any temporary changes in file by user
this layer 6 is destroyed if container is destroyed

Layer 5: Update Entry point with "flask" command
Layer 4: Source code
Layer 3: Changes in pip packages
Layer 2: Changes in apt packages
Layer 1: Base Ubuntu Layer
1-5 are Docker Image Layer; Read-only

Any created image can not be modified; it's read-only
If require then should be built new image


Code is part of image and can't be modified
Modification can be done using the different version of same in in Layer 6, called copy-on-write mechanism
Image will be same forever untill it is re-built


Volume Mounting
===============
sudo docker volume create data_volume
# create data_volume dir in /var/lib/docker

sudo docker run -v data_volume:/var/lib/mysql mysql

sudo docker run -v data_volume2:/var/lib/mysql mysql
# docker can automatically create data_volume2 in /var/lib/docker
# OR
docker run \
--mount type:bind,source=/data/mysql,target=/var/lib/mysql mysql
# preferred way to Bind mouting

Docker uses storage driver to enable layered architecture

AUFS # Default in Ubuntu
ZFS
BTRFS
Device Mapper
Overlay
Overlay2

Docker Compose
==============
To start multiple services all together

sudo docker run naser/simple-web-app
docker run mongo-db
docker run redis:alpine
docker run ansible

docker-compose.yml

services:
    web:
	    image: "naser/simple-web-app"
	database:
	    image: "mongodb"
	messaging:
	    image: "redis:alpine"
	orchestration:
	    image: "ansible"


docker-compose up


Links
=====
Links is a command line option which can link to container
sudo docker run -d --name=redis redis
sudo docker run -d --name=vote -p 5000:80 --link redis:redis voting-app

# it adds a entry in /etc/hosts file of voting-app container with the IP of redis

172.16.0.2    redis   89edfgt56d

Link to be depricated in newer docker release
Docker swarm and networking support better way to do it


Docker Compose Versions
=======================
Version 1 networking feature is limited
Version 2 dependency can't be defined
Version 3

version: 3
must be defined in docker-compose file


Docker Registry
===============
Docker Hub


image: docker.io/nginx/nginx:latest
       Registry/User/Image:Tag

Login into private registry
===========================
sudi docker login private-registry.io
Username:
Password:

docker run private-registry.io/apps/internal-app


Deploy Private Registry
=======================

docker run -d =p 5000:5000 -name registry registry:2
# expose an API on port 5000

docker image tag my-image localhost:5000/my-image

docker push localhost:5000/my-image

docker pull localhost:5000/my-image

Docker Engine
=============

Docker Client: the CLI where we type, CLI communicates with REST API
REST API Server: An interface that communicates with deamon
Docker Deamon: backgroud process manages images, containers, volumes, networks 


CLI can be typed on different host other that docker host
sudo docker -H=10.0.0.1:2345 run nginx

Containerization
================
Docker uses namespace to isolate everything
ProcessID
UnixTimesharing
Mount
Network
InterProcess

Host ProcessID    Container ProcessID
1
 2
 3
 4 ---------------> 1
 5 --------------->  2

Cgroups
=======

To manage CPU/Memory allocation to each container

docker run --cpus=.5  --memory-100m ubuntu


Container Orchestration
=======================
Docker Swarm from Docker
Kebernates from Google
MESOS from Apache

















	
	
	














